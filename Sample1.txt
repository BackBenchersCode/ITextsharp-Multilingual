using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Web;

namespace DownloadPDF_Korean
{
    public class DownloadPDF
    {
         
        

        #region GeneratePDF
        /// <summary>
        /// function for PDF generation.
        /// </summary>
        /// <param name="lstDownloadPDF"></param>
        /// <param name="htmlcontent"></param>
        public static void GeneratePDF(List<PDFModel>lstDownloadPDF, out string htmlcontent)
        {

            string html = GenerateHTML(lstDownloadPDF);
            string builder = string.Empty;
            builder += "<html>";
            builder += "<head>";
            builder += "</head>";
            builder += "<body style='font-size:10px;margin: 0px;'>";
            builder += html;
            builder += "</body>";
            builder += "</html>";

            htmlcontent = string.Format(builder, DateTime.Now);
        }
        #endregion GeneratePDF

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lstDownloadPDF"></param>
        /// <returns></returns>
        private static string GenerateHTML(List<PDFModel> lstDownloadPDF)
        {
            //Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(selectedLanguage);
            //Thread.CurrentThread.CurrentUICulture = new CultureInfo(selectedLanguage);
            string html = File.ReadAllText(HttpContext.Current.Server.MapPath("/DownloadPDF.html"));
             
            string Title = HttpContext.GetGlobalResourceObject("SiteResource", "Title").ToString();
            string Head1 = HttpContext.GetGlobalResourceObject("SiteResource", "Head1").ToString();
            string Head2 = HttpContext.GetGlobalResourceObject("SiteResource", "Head2").ToString();
            string Footer = HttpContext.GetGlobalResourceObject("SiteResource", "Footer").ToString();
            
            //Default texts will appaear in multiligual
            html = html.Replace("@Date", DateTime.Now.ToString("MMM dd yyyy"));
            html = html.Replace("@Title", Title);
            html = html.Replace("@Head1", Head1);
            html = html.Replace("@Head2", Head2);
            html = html.Replace("@Footer", Footer);

            if (lstDownloadPDF.Count>0)
            {
                //data from DB will be placed here
                html = html.Replace("@Item1", lstDownloadPDF[0].UsernameFromDB);
                html = html.Replace("@Item2", lstDownloadPDF[0].UserIDFromDB); 
            }
           
            return html;
        }

        #region HtmlToPdfBuilder Class

        public class HtmlToPdfBuilder
        {

            #region Constants

            private const string STYLE_DEFAULT_TYPE = "style";
            private const string DOCUMENT_HTML_START = "<html><head></head><body>";
            private const string DOCUMENT_HTML_END = "</body></html>";
           
            #endregion

            #region Constructors

            /// <summary>
            /// Creates a new PDF document template. Use PageSizes.{DocumentSize}
            /// </summary>
            public HtmlToPdfBuilder(Rectangle size)
            {
                this.PageSize = size;
                this._Pages = new List<HtmlPdfPage>();
                this._Styles = new StyleSheet();
            }

            #endregion

            #region Delegates

            /// <summary>
            /// Method to override to have additional control over the document
            /// </summary>
            public event RenderEvent BeforeRender;

            /// <summary>
            /// Method to override to have additional control over the document
            /// </summary>
            public event RenderEvent AfterRender;

            #endregion

            #region Properties

            /// <summary>
            /// The page size to make this document
            /// </summary>
            public Rectangle PageSize { get; set; }

            /// <summary>
            /// Returns the page at the specified index
            /// </summary>
            public HtmlPdfPage this[int index]
            {
                get
                {
                    return this._Pages[index];
                }
            }

            /// <summary>
            /// Returns a list of the pages available
            /// </summary>
            public HtmlPdfPage[] Pages
            {
                get
                {
                    return this._Pages.ToArray(); //http://aspnettutorialonline.blogspot.com/
                }
            }

            #endregion

            #region Members

            private List<HtmlPdfPage> _Pages;
            private StyleSheet _Styles;

            #endregion

            #region Working With The Document

            /// <summary>
            /// Appends and returns a new page for this document http://aspnettutorialonline.blogspot.com/
            /// </summary>
            public HtmlPdfPage AddPage()
            {
                HtmlPdfPage page = new HtmlPdfPage();
                this._Pages.Add(page);
                return page;
            }

            /// <summary>
            /// Removes the page from the document http://aspnettutorialonline.blogspot.com/
            /// </summary>
            public void RemovePage(HtmlPdfPage page)
            {
                this._Pages.Remove(page);
            }

            /// <summary>
            /// Appends a style for this sheet http://aspnettutorialonline.blogspot.com/
            /// </summary>
            public void AddStyle(string selector, string styles)
            {
                this._Styles.LoadTagStyle(selector, HtmlToPdfBuilder.STYLE_DEFAULT_TYPE, styles);
            }

            /// <summary>
            /// Imports a stylesheet into the document
            /// </summary>
            public static void ImportStylesheet(string path)
            {

                //load the file
                string content = File.ReadAllText(path);

              
            }


            #endregion

            #region Document Navigation

            /// <summary>
            /// Moves a page before another
            /// </summary>
            public void InsertBefore(HtmlPdfPage page, HtmlPdfPage before)
            {
                this._Pages.Remove(page);
                this._Pages.Insert(
                    Math.Max(this._Pages.IndexOf(before), 0),
                    page);
            }

            /// <summary>
            /// Moves a page after another
            /// </summary>
            public void InsertAfter(HtmlPdfPage page, HtmlPdfPage after)
            {
                this._Pages.Remove(page);
                this._Pages.Insert(
                    Math.Min(this._Pages.IndexOf(after) + 1, this._Pages.Count),
                    page);
            }


            #endregion

            #region Rendering The Document

            /// <summary>
            /// Renders the PDF to an array of bytes
            /// </summary>
            public byte[] RenderPdf()
            {

                //Document is inbuilt class, available in iTextSharp
                MemoryStream file = new MemoryStream();
                Document document = new Document(this.PageSize, 10, 10, 10, 10);
                PdfWriter writer = PdfWriter.GetInstance(document, file);

                //allow modifications of the document
                if (this.BeforeRender is RenderEvent)
                {
                    this.BeforeRender(writer, document);
                }

                //header
               
                document.Add(new Header(string.Empty, string.Empty));
                document.Open();

                //render each page that has been added
                foreach (HtmlPdfPage page in this._Pages)
                {
                    document.NewPage();

                    //generate this page of text
                    MemoryStream output = new MemoryStream();
                    StreamWriter html = new StreamWriter(output, Encoding.UTF8);
                    

                    //get the page output
                    html.Write(string.Concat(HtmlToPdfBuilder.DOCUMENT_HTML_START, page._Html.ToString(), HtmlToPdfBuilder.DOCUMENT_HTML_END));
                    html.Close();
                    html.Dispose();

                    //read the created stream
                    MemoryStream generate = new MemoryStream(output.ToArray());
                    StreamReader reader = new StreamReader(generate);
                    foreach (object item in HTMLWorker.ParseToList(reader, this._Styles))
                    {
                        document.Add((IElement)item);
                    }

                    //cleanup these streams
                    html.Dispose();
                    reader.Dispose();
                    output.Dispose();
                    generate.Dispose();

                }

                //after rendering
                if (this.AfterRender is RenderEvent)
                {
                    this.AfterRender(writer, document);
                }

                //return the rendered PDF
                document.Close();
                return file.ToArray();

            }

            public byte[] RenderPdf_Korean(string htmlcontent)
            {

                //Document is inbuilt class, available in iTextSharp
                MemoryStream file = new MemoryStream();
               
                #region Korean
                string fontpath = System.Web.HttpContext.Current.Request.PhysicalApplicationPath + "\\fonts\\KoPubBatang-Regular.ttf";
                FontFactory.Register(fontpath);
                StyleSheet style = new StyleSheet();
                style.LoadTagStyle("body", "face", "KoPubBatang-Regular");
                style.LoadTagStyle("body", "encoding", BaseFont.IDENTITY_H);
                using (Document document = new Document())
                {
                    PdfWriter writer = PdfWriter.GetInstance(document, file);
                    document.Open();
                    foreach (IElement element in HTMLWorker.ParseToList(new StringReader(htmlcontent.ToString()), style))
                    {
                        document.Add(element);
                    }
                    document.Close();
                    return file.ToArray();
                }
                #endregion Korean

              

            }
            #endregion

        }

        #endregion

        #region HtmlPdfPage Class

        /// <summary>
        /// A page to insert into a HtmlToPdfBuilder Class
        /// </summary>
        public class HtmlPdfPage
        {

            #region Constructors

            /// <summary>
            /// The default information for this page
            /// </summary>
            public HtmlPdfPage()
            {
                this._Html = new StringBuilder();
            }

            #endregion

            #region Fields

            //parts for generating the page
            internal StringBuilder _Html;

            #endregion

            #region Working With The Html

            /// <summary>
            /// Appends the formatted HTML onto a page
            /// </summary>
            public virtual void AppendHtml(string content, params object[] values)
            {
                this._Html.AppendFormat(content, values);
            }

            #endregion

        }

        #endregion

        #region Rendering Delegate

        /// <summary>
        /// Delegate for rendering events
        /// </summary>
        public delegate void RenderEvent(PdfWriter writer, Document document);

        #endregion

        #region CreatePDFFromHTMLFile
        /// <summary>
        /// create PDF from HTML file.
        /// </summary>
        /// <param name="HtmlStream"></param>
        /// <param name="FileName"></param>
        public static void CreatePDFFromHTMLFile(string language,string HtmlStream, string FileName)
        {
            try
            {
                object TargetFile = FileName;
                string ModifiedFileName = string.Empty;
                string FinalFileName = string.Empty;
                byte[] file=new byte[]{};
               
                DownloadPDF.HtmlToPdfBuilder builder = new DownloadPDF.HtmlToPdfBuilder(iTextSharp.text.PageSize.A4);
                DownloadPDF.HtmlPdfPage first = builder.AddPage();
                first.AppendHtml(HtmlStream);

                if (language == "en-US")
                {
                    file = builder.RenderPdf();
                }
                if (language == "ko-KR")
                {
                    file = builder.RenderPdf_Korean(HtmlStream);
                }
                File.WriteAllBytes(TargetFile.ToString(), file);

                
                iTextSharp.text.pdf.PdfReader reader = new iTextSharp.text.pdf.PdfReader(TargetFile.ToString());
                ModifiedFileName = TargetFile.ToString();
                ModifiedFileName = ModifiedFileName.Insert(ModifiedFileName.Length - 4, "1");
                

                
                iTextSharp.text.pdf.PdfEncryptor.Encrypt(reader, new FileStream(ModifiedFileName, FileMode.Append), iTextSharp.text.pdf.PdfWriter.STRENGTH128BITS, "", "", iTextSharp.text.pdf.PdfWriter.AllowPrinting);
                

                reader.Close();
                if (File.Exists(TargetFile.ToString()))
                    File.Delete(TargetFile.ToString());
                    
                FinalFileName = ModifiedFileName.Remove(ModifiedFileName.Length - 5, 1);
                File.Copy(ModifiedFileName, FinalFileName);
                
                if (File.Exists(ModifiedFileName))
                    File.Delete(ModifiedFileName);
                    

            }
            catch (Exception ex)
            {
               
                throw ex;
            }
        }
        #endregion CreatePDFFromHTMLFile

        /// <summary>
        /// private constructor
        /// </summary>
        private DownloadPDF()
        { }
    }
}

-------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Threading;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace DownloadPDF_Korean
{
    public partial class Download : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if(!IsPostBack)
            {

            }
        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            try
            {

                string htmlcontent;

                #region pull data from DB instead of below code and pass it to the PDF file
                List<PDFModel> pdfList = new List<PDFModel>();
                PDFModel obj = new PDFModel();
                obj.UsernameFromDB = "Habeeb";
                obj.UserIDFromDB = "12xx56zz";
                pdfList.Add(obj);
                #endregion

                
                string language = RadioButtonList1.SelectedItem.Text;
                string setLanguage = string.Empty;
                if (language.ToUpper() == "ENGLISH")
                {
                    setLanguage = "en-US";
                }
                else
                {
                    setLanguage = "ko-KR";
                }
                Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo(setLanguage);
                Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(setLanguage);

                DownloadPDF.GeneratePDF(pdfList, out htmlcontent);
                string fileName = "Test Download";
                fileName = fileName.Replace("/", string.Empty).Replace("_", string.Empty).Replace(".", string.Empty).Replace(":", string.Empty);
                if (setLanguage == "ko-KR")
                {
                    fileName = fileName + " - QUOTE(Korean).pdf";
                }
                else
                {
                    fileName = fileName + " - QUOTE.pdf";
                }

                string filePath = ConfigurationManager.AppSettings.Get("TempFileSavePath") + fileName;
                string strHtml = string.Empty;
                string pdfFileName = Server.MapPath(filePath);
                StringWriter sw = new StringWriter();
                HtmlTextWriter hw = new HtmlTextWriter(sw);
                StringReader sr = new StringReader(htmlcontent);
                strHtml = sr.ReadToEnd();
                sr.Close();
                DownloadPDF.CreatePDFFromHTMLFile(setLanguage,strHtml, pdfFileName);
                Response.Buffer = true;
                Response.Charset = "";
                Response.Clear();
                Response.Cache.SetCacheability(HttpCacheability.NoCache);

                Response.ContentType = "application/download";
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename=\"{0}\"", fileName));

                Response.WriteFile(pdfFileName);

                Response.Flush();
                Response.End();

            }
            catch (System.Threading.ThreadAbortException ex1)
            {
                // do nothing
                throw ex1;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
    }
}
-----------------------------------------------------------------------------------------------------------


<!--<img src="@ImagePath" />-->
    <br /><div style="text-align: center; font-size:16px" id="title">@Title</div><br />
    <div style="padding: 10px; ">
        <span style="text-align: right;"> @Date </span><br /><br />
        <table style="width:100%">
            <tr>
                <th width="33%" align="left" id="head1">@Head1</th>
                <th width="33%" align="left" id="head2">@Head2</th>
            </tr>
            <tr>
                <td id="item1">@Item1</td>
                <td id="item2">@Item2</td>
            </tr>
           
        </table>
        <br /><br />
        <ul style="margin: 0px 145px;list-style:disc;font-size:8px">
            <li id="footer">@Footer</li>
        </ul>
    </div>

------------------------------------------------------------------------------------------------------

itextsharp.dll
itextsharp.xmlworker.dll
-----------------------------------------------------------------------------------------------------
KoPubBatang-Regular.ttf
----------------------------------------------------------------------------------------------------